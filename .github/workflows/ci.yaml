name: CI/CD Pipeline
on: 
  push:
    branches:
      - main
    # Ignored paths to update on git commit
    paths-ignore:
      - "README.md"
      - "LICENSE"
      - "docs/"
      - ".gitignore"
      - "CNAME"
      - ".ruby-version"
      - "benchmark"
      - ".jekyll-cache"
      - "Rakefile"
      - "CHANGELOG.md"
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Workflow Jobs
jobs:
  Unit-Tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true
      - name: Test Suite
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: bundle exec rake test
      - name: Results
        run: echo "üçè This job's status is ${{ job.status }}."
  # Deployment job
  deploy:
    name: "Deploy"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
  # Build Job
  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: [Unit-Tests, spelling, benchmark, rubocop]
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ruby
        uses: ruby/setup-ruby@0a29871fe2b0200a17a4497bae54fe5df0d973aa # v1.115.3
        with:
          ruby-version: 3.2.2
          bundler-cache: true
          cache-version: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v2
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v1
      - name: Results
        run: echo "üçè This job's status is ${{ job.status }}."
  rubocop:
    name: "Rubocop"
    permissions:
      contents: read
      pull-requests: read
      actions: read
    outputs:
      followup: ${{ steps.spelling.outputs.followup }}
    runs-on: ubuntu-latest
    needs: Unit-Tests
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@master
        with:
          ruby-version: 3.2.2
      - name: Install Dependencies
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          sudo apt-get update && sudo apt-get -y install minify
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          gem install rubocop
          gem install rubocop-minitest
          gem install rubocop-performance
          gem install rubocop-rake
          gem install rubocop-rspec
      - name: Build Jekyll
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: bundle exec jekyll build
      - name: rubocop
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: rubocop
  spelling:
    name: "Spell Check"
    permissions:
      contents: read
      pull-requests: read
      actions: read
    outputs:
      followup: ${{ steps.spelling.outputs.followup }}
    runs-on: ubuntu-latest
    needs: Unit-Tests
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@master
        with:
          ruby-version: 3.2.2
      - name: Install Dependencies
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          sudo apt-get update && sudo apt-get -y install minify
      - name: Bundle Install
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Build Jekyll
        run: bundle exec jekyll build
      - name: check-spelling
        id: spelling
        uses: check-spelling/check-spelling@main
        with:
          check_extra_dictionaries: ''
          suppress_push_for_open_pull_request: 1
          checkout: true
          post_comment: 0
  profiler:
    name: "Profiler"
    runs-on: "ubuntu-latest"
    needs: Unit-Tests
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    steps:
      - name: Checkout Jekyll
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ github.event.inputs.ruby_version }}
          bundler-cache: true
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@master
        with:
          ruby-version: 3.2.2
      - name: Install Dependencies
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          sudo apt-get update && sudo apt-get -y install minify
      - name: Bundle Install
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Build Jekyll
        run: bundle exec jekyll build
      - name: Run Profiler
        run: "bundle exec rake profile:memory"
  stress-test:
    name: "Stress Test"
    runs-on: "ubuntu-latest"
    needs: Unit-Tests
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    env:
      BENCHMARK: true
    steps:
      - name: Checkout Jekyll
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ github.event.inputs.ruby_version }}
          bundler-cache: true
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@master
        with:
          ruby-version: 3.2.2
      - name: Install Dependencies
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          sudo apt-get update && sudo apt-get -y install minify
      - name: Bundle Install
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Build Jekyll
        run: bundle exec jekyll build
      - name: Run Benchmark
        run: "bundle exec ruby benchmark/capture-assign.rb"
  benchmark:
    name: "Benchmark"
    runs-on: "ubuntu-latest"
    needs: Unit-Tests
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    env:
      BENCHMARK: true
    steps:
      - name: Checkout Jekyll
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ github.event.inputs.ruby_version }}
          bundler-cache: true
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@master
        with:
          ruby-version: 3.2.2
      - name: Install Dependencies
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          sudo apt-get update && sudo apt-get -y install minify
      - name: Bundle Install
        env:
          RAILS_ENV: test
          JEKYLL_ENV: test
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Build Jekyll
        run: bundle exec jekyll build
      - name: Run Benchmark
        run: "c=$(int_size=$(a=$(find _site -type f -name '*.html' -exec du -ak {} + | sort -nr | head -n 1) | size=${a:0:3} | echo $size | sed -E 's,\\t|\\r|\\n,,g') | echo $((int_size))) | if [ $c -lt 50 ]; then exit 2; else exit 0; fi;"
  notification:
    name: "Notification"
    needs: [build, deploy, release, spelling, benchmark, rubocop, Unit-Tests]
    if: "always()"
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ChatID }}
          token: ${{ secrets.BotToken }}
          message: |
              ${{ (needs.Unit-Tests.result == 'success' && needs.rubocop.result == 'success' && needs.benchmark.result == 'success' && needs.spelling.result == 'success' && needs.build.result == 'success' && needs.deploy.result == 'success' && '‚úÖ') || 'üö´' }} Code Deployed: ${{ github.repository }}

              ${{ github.actor }} created commit:
              ${{ github.event.commits[0].message }}

              Job status list

              - ${{ (needs.Unit-Tests.result == 'cancelled' && 'üö´') || (needs.Unit-Tests.result == 'failure' && 'üö´') || (needs.Unit-Tests.result == 'skipped' && '‚è≠Ô∏è') || needs.Unit-Tests.result == 'success' && '‚úÖ' }} Unit-Tests: ${{ needs.Unit-Tests.result }}
              - ${{ (needs.rubocop.result == 'cancelled' && 'üö´') || (needs.rubocop.result == 'failure' && 'üö´') || (needs.rubocop.result == 'skipped' && '‚è≠Ô∏è') || needs.rubocop.result == 'success' && '‚úÖ' }} Rubocop: ${{ needs.rubocop.result }}
              - ${{ (needs.benchmark.result == 'cancelled' && 'üö´') || (needs.benchmark.result == 'failure' && 'üö´') || (needs.benchmark.result == 'skipped' && '‚è≠Ô∏è') || needs.benchmark.result == 'success' && '‚úÖ' }} Benchmark: ${{ needs.benchmark.result }}
              - ${{ (needs.spelling.result == 'cancelled' && 'üö´') || (needs.spelling.result == 'failure' && 'üö´') || (needs.spelling.result == 'skipped' && '‚è≠Ô∏è') || needs.spelling.result == 'success' && '‚úÖ' }} Spelling: ${{ needs.spelling.result }}
              - ${{ (needs.build.result == 'cancelled' && 'üö´') || (needs.build.result == 'failure' && 'üö´') || (needs.build.result == 'skipped' && '‚è≠Ô∏è') || needs.build.result == 'success' && '‚úÖ' }} build: ${{ needs.build.result }}
              - ${{ (needs.deploy.result == 'cancelled' && 'üö´') || (needs.deploy.result == 'failure' && 'üö´') || (needs.deploy.result == 'skipped' && '‚è≠Ô∏è') || needs.deploy.result == 'success' && '‚úÖ' }} deploy: ${{ needs.deploy.result }}
              - ${{ (needs.release.result == 'cancelled' && 'üö´') || (needs.release.result == 'failure' && 'üö´') || (needs.release.result == 'skipped' && '‚è≠Ô∏è') || needs.release.result == 'success' && '‚úÖ' }} Release: ${{ needs.release.result }}
              
              
              See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
  release:
    name: "Release"
    needs: [Unit-Tests, spelling, benchmark, rubocop]
    if: "contains(github.event_name, 'pull_request') || github.event_name == 'push'"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: CupOfTea696/gh-action-auto-release@v1.0.2
        with:
          title: "Release: v$version"
          tag: "v$semver"
          draft: false
          regex: "/^release: v#{semver}$/i"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
